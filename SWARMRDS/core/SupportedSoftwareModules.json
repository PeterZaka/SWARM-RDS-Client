{
    "SupportedModules": {
        "SWARMVersion": "1.0.0",
        "ValidModuleParameters": [
            "Level",
            "States",
            "Algorithm",
            "Publishes",
            "Subscribes",
            "Parameters"
        ],
        "ValidAlgorithmParameters": [
            "Parameters",
            "ClassName",
            "InputArgs",
            "ReturnValues",
            "FunctionName"
        ],
        "ValidModuleNames": [
            "HighLevelBehavior",
            "LowLevelPathPlanning",
            "HighLevelPathPlanning",
            "ObstacleAvoidance",
            "Detector",
            "Mapping",
            "TorchPerception",
            "Perception",
            "SensorDataCollector"
        ],
        "ValidMessageTypes": [
            "MovementCommand",
            "Trajectory",
            "Position",
            "LinearVelocity",
            "AngularVelocity",
            "AgentState",
            "AngularAcceleration",
            "LinearAcceleration",
            "Quaternion",
            "OccupancyMap",
            "Heading",
            "Speed",
            "Image",
            "Detection",
            "Message",
            "SWARMPointCloud"
        ],
        "ValidCustomModelModules": [
            "TorchPerception"
        ],
        "ValidNoAlgorithmModules": [
            "SensorDataCollector"
        ],
        "Mapping": {
            "ValidModuleParameters": {},
            "ValidClassNames": [
                "SWARMOccupancyMap"
            ],
            "ValidParameters": {
                "SWARMOccupancyMap": {
                    "Type": {
                        "type": "str",
                        "description": "The Type of Map to Display",
                        "valid_entries": [
                            "OccupancyMap"
                        ]
                    },
                    "Center": {
                        "type": "dict",
                        "description": "The center position of the map in NED coordinates relative to the agent",
                        "valid_fields": [
                            "X",
                            "Y",
                            "Z"
                        ],
                        "field_data_type": "float",
                        "field_range": [
                            -99.0,
                            99.0
                        ]
                    },
                    "Size": {
                        "type": "dict",
                        "description": "The Size of the map from the origin to one edge of the map in meters",
                        "valid_fields": [
                            "X",
                            "Y",
                            "Z"
                        ],
                        "field_data_type": "int",
                        "field_range": [
                            0.0,
                            500.0
                        ]
                    },
                    "UpdateRate": {
                        "type": "float",
                        "description": "How often the map should update in seconds. Set to 0.0 if you only want to run it once",
                        "range": [
                            0.0,
                            5.0
                        ]
                    },
                    "ResolutionInMeters": {
                        "type": "float",
                        "description": "The resolution of the map (ie. the size of 1 grid square in the map) in meters",
                        "range": [
                            0.1,
                            5.0
                        ]
                    }
                }
            },
            "ValidInputArgs": {
                "SWARMOccupancyMap": []
            },
            "RequiredSensors": {
                "SWARMOccupancyMap": []
            },
            "ValidReturnValues": {
                "SWARMOccupancyMap": [
                    "OccupancyMap"
                ]
            },
            "DefaultIO": {
                "Publishes": {
                    "SWARMOccupancyMap": [
                        "OccupancyMap"
                    ]
                },
                "Subscribes": {
                    "SWARMOccupancyMap": []
                }
            }
        },
        "HighLevelBehavior": {
            "ValidModuleParameters": {},
            "ValidClassNames": [
                "PathFollowing",
                "CommsTester"
            ],
            "ValidParameters": {
                "PathFollowing": {
                    "completed_waypoint_distance": {
                        "type": "float",
                        "description": "The distance to consider a waypoint completed in meters",
                        "Default": 1.25,
                        "Unit": "m",
                        "range": [
                            0.1,
                            3.0
                        ]
                    }
                },
                "CommsTester": {
                    "recipient": {
                        "type": "str",
                        "description": "The agent to send the message to",
                        "valid_entries": [
                            "*"
                        ]
                    }
                }
            },
            "ValidInputArgs": {
                "PathFollowing": [
                    "Trajectory"
                ],
                "CommsTester": []
            },
            "ValidReturnValues": {
                "PathFollowing": [
                    "Position",
                    "Heading",
                    "Speed"
                ],
                "CommsTester": [
                    "Message"
                ]
            },
            "RequiredSensors": {
                "PathFollowing": [],
                "CommsTester": []
            },
            "DefaultIO": {
                "Publishes": {
                    "PathFollowing": [
                        "MovementCommand"
                    ],
                    "CommsTester": [
                        "Message"
                    ]
                },
                "Subscribes": {
                    "PathFollowing": [
                        "AgentState"
                    ],
                    "CommsTester": []
                }
            }
        },
        "LowLevelPathPlanning": {
            "ValidClassNames": [
                "PassThroughPlanner",
                "PassThroughTrajectoryPlanner",
                "MinSnapTrajectoryPlanner",
                "LinePlanner"
            ],
            "ValidParameters": {
                "PassThroughPlanner": {},
                "PassThroughTrajectoryPlanner": {},
                "LinePlanner": {},
                "MinSnapTrajectoryPlanner": {
                    "default_speed": {
                        "type": "float",
                        "description": "[m/s] The default speed the trajectory should be planned for in meters per second",
                        "Default": 3.0,
                        "Unit": "m/s",
                        "range": [
                            0.5,
                            10.0
                        ]
                    },
                    "setpoint_type": {
                        "type": "str",
                        "description": "[m/s] The default speed the trajectory should be planned for in meters per second",
                        "valid_entries": [
                            "position",
                            "velocity",
                            "angular_rate"
                        ]
                    }
                }
            },
            "ValidInputArgs": {
                "PassThroughPlanner": [
                    "MovementCommand"
                ],
                "MinSnapTrajectoryPlanner": [
                    "Trajectory"
                ],
                "PassThroughTrajectoryPlanner": [
                    "Trajectory"
                ],
                "LinePlanner": [
                    "MovementCommand"
                ]
            },
            "ValidReturnValues": {
                "PassThroughPlanner": [
                    "MovementCommand"
                ],
                "LinePlanner": [
                    "MovementCommand"
                ],
                "MinSnapTrajectoryPlanner": [
                    "Trajectory"
                ],
                "PassThroughTrajectoryPlanner": [
                    "Trajectory"
                ]
            },
            "ValidModuleParameters": {
                "completed_waypoint_distance": {
                    "type": "float",
                    "description": "The distance in meters to deem a waypoint 'completed'",
                    "Default": 0.25,
                    "Unit": "m",
                    "range": [
                        0.1,
                        5.0
                    ]
                },
                "TakeoffAltitude": {
                    "type": "float",
                    "description": "The distance above the ground in meters to takeoff",
                    "Default": 1.0,
                    "Unit": "m",
                    "range": [
                        0.1,
                        5.0
                    ]
                }
            },
            "RequiredSensors": {
                "PassThroughPlanner": [],
                "LinePlanner": [],
                "MinSnapTrajectoryPlanner": [],
                "PassThroughTrajectoryPlanner": []
            },
            "DefaultIO": {
                "Publishes": {
                    "PassThroughPlanner": [],
                    "MinSnapTrajectoryPlanner": [],
                    "PassThroughTrajectoryPlanner": [],
                    "LinePlanner": []
                },
                "Subscribes": {
                    "PassThroughPlanner": [
                        "AgentState",
                        "MovementCommand"
                    ],
                    "MinSnapTrajectoryPlanner": [
                        "AgentState",
                        "Trajectory"
                    ],
                    "PassThroughTrajectoryPlanner": [
                        "AgentState",
                        "Trajectory"
                    ],
                    "LinePlanner": [
                        "AgentState",
                        "MovementCommand"
                    ]
                }
            }
        },
        "HighLevelPathPlanning": {
            "ValidModuleParameters": {},
            "ValidClassNames": [
                "AStar2D"
            ],
            "ValidParameters": {
                "AStar2D": {
                    "resolution": {
                        "type": "float",
                        "description": "The Resolution of the Voxel Grid map in meters",
                        "Default": 0.25,
                        "Unit": "m",
                        "range": [
                            0.1,
                            5.0
                        ]
                    },
                    "goal_point": {
                        "type": "list",
                        "description": "The X and Y coordinates that are the goal in NED in meters",
                        "length": 2,
                        "field_data_type": "float",
                        "Default": [
                            0.0,
                            0.0
                        ],
                        "labels": [
                            "X",
                            "Y"
                        ],
                        "field_range": [
                            -999.0,
                            999.0
                        ]
                    },
                    "map_size": {
                        "type": "list",
                        "description": "The Resolution of the Voxel Grid map in meters",
                        "length": 2,
                        "field_data_type": "float",
                        "labels": [
                            "X",
                            "Y"
                        ],
                        "field_range": [
                            -999.0,
                            999.0
                        ]
                    },
                    "agent_radius": {
                        "type": "float",
                        "description": "The radius of the agent in meters",
                        "range": [
                            0.5,
                            2.0
                        ]
                    },
                    "flight_altitude": {
                        "type": "float",
                        "description": "The altitude to fly the agent at in meters in NED (so negative is up)",
                        "range": [
                            -0.5,
                            -99.0
                        ]
                    }
                }
            },
            "ValidInputArgs": {
                "AStar2D": [
                    "OccupancyMap"
                ]
            },
            "ValidReturnValues": {
                "AStar2D": [
                    "Trajectory"
                ]
            },
            "RequiredSensors": {
                "AStar2D": []
            },
            "DefaultIO": {
                "Publishes": {
                    "AStar2D": [
                        "Trajectory"
                    ]
                },
                "Subscribes": {
                    "AStar2D": [
                        "OccupancyMap",
                        "AgentState"
                    ]
                }
            }
        },
        "SensorDataCollector": {
            "ValidClassNames": [
                "SensorDataCollector"
            ],
            "ValidParameters": {
                "SensorDataCollector": {}
            },
            "ValidInputArgs": {
                "SensorDataCollector": []
            },
            "ValidReturnValues": {
                "SensorDataCollector": []
            },
            "RequiredSensors": {
                "SensorDataCollector": []
            },
            "ValidModuleParameters": {
                "OutputType": {
                    "type": "str",
                    "description": "The format of the data collected by the Sensor Data Collector node.",
                    "valid_entries": [
                        "csv"
                    ]
                }
            },
            "DefaultIO": {
                "Publishes": {
                    "SensorDataCollector": []
                },
                "Subscribes": {
                    "SensorDataCollector": [
                        "AgentState"
                    ]
                }
            }
        },
        "Detector": {
            "ValidModuleParameters": {},
            "ValidClassNames": [
                "SWARMDetector"
            ],
            "ValidParameters": {
                "SWARMDetector": {}
            },
            "ValidInputArgs": {
                "SWARMDetector": {}
            },
            "ValidReturnValues": {
                "SWARMDetector": []
            },
            "RequiredSensors": {
                "SWARMDetector": [
                    "Camera"
                ]
            },
            "DefaultIO": {
                "Publishes": {
                    "SWARMDetector": [
                        "Detection"
                    ]
                },
                "Subscribes": {
                    "SWARMDetector": [
                        "Image"
                    ]
                }
            }
        },
        "ObstacleAvoidance": {
            "ValidModuleParameters": {},
            "ValidClassNames": [
                "SlopeDetection",
                "SWARMAvoidance"
            ],
            "ValidParameters": {
                "SlopeDetection": {
                    "min_slope": {
                        "type": "float",
                        "description": "The minimum slope of the terrain in degrees to acivate the algorithm.",
                        "range": [
                            5.0,
                            40.0
                        ]
                    },
                    "max_slope": {
                        "type": "float",
                        "description": "The maximum slope of the terrain in degrees to acivate the algorithm.",
                        "range": [
                            50.0,
                            85.0
                        ]
                    }
                },
                "SWARMAvoidance": {
                    "min_incline": {
                        "type": "float",
                        "description": "The minimum slope of the terrain in degrees to acivate the algorithm.",
                        "range": [
                            5.0,
                            40.0
                        ],
                        "default": 15.0
                    },
                    "max_incline": {
                        "type": "float",
                        "description": "The maximum slope of the terrain in degrees to acivate the algorithm.",
                        "range": [
                            50.0,
                            85.0
                        ],
                        "default": 65.0
                    },
                    "min_window": {
                        "type": "float",
                        "description": "The minimum window size in meters to use for the algorithm.",
                        "range": [
                            -5.0,
                            5.0
                        ],
                        "default": 1.0
                    },
                    "max_window": {
                        "type": "float",
                        "description": "The maximum window size in meters to use for the algorithm.",
                        "range": [
                            5.0,
                            20.0
                        ],
                        "default": 10.0
                    },
                    "threshold_distance": {
                        "type": "float",
                        "description": "The distance in meters to consider an obstacle a threat.",
                        "range": [
                            0.5,
                            10.0
                        ],
                        "default": 7.0
                    },
                    "threshold_time": {
                        "type": "float",
                        "description": "The time in seconds to consider an obstacle a threat.",
                        "range": [
                            0.5,
                            5.0
                        ],
                        "default": 1.0
                    },
                    "drone_velocity": {
                        "type": "float",
                        "description": "The velocity of the drone in meters per second.",
                        "range": [
                            0.5,
                            5.0
                        ],
                        "default": 1.0
                    },
                    "drone_velocity_forward": {
                        "type": "float",
                        "description": "The velocity of the drone in meters per second when moving to the North Direction.",
                        "range": [
                            0.5,
                            5.0
                        ],
                        "default": 1.0
                    },
                    "drone_velocity_right": {
                        "type": "float",
                        "description": "The velocity of the drone in meters per second when moving to the East Direction.",
                        "range": [
                            0.5,
                            5.0
                        ],
                        "default": 1.0
                    },
                    "drone_velocity_up": {
                        "type": "float",
                        "description": "The velocity of the drone in meters per second when moving in the up direction.",
                        "range": [
                            0.5,
                            5.0
                        ],
                        "default": 1.0
                    }
                }
            },
            "ValidInputArgs": {
                "SlopeDetection": [],
                "SWARMAvoidance": []
            },
            "RequiredSensors": {
                "SlopeDetection": [
                    "LiDAR"
                ],
                "SWARMAvoidance": [
                    "LiDAR",
                    "Distance"
                ]
            },
            "ValidReturnValues": {
                "SlopeDetection": [
                    "Position",
                    "LinearVelocity",
                    "Heading"
                ],
                "SWARMAvoidance": [
                    "Velcoity"
                ]
            },
            "DefaultIO": {
                "Publishes": {
                    "SlopeDetection": [
                        "MovementCommand"
                    ],
                    "SWARMAvoidance": [
                        "MovementCommand"
                    ]
                },
                "Subscribes": {
                    "SlopeDetection": [
                        "AgentState"
                    ],
                    "SWARMAvoidance": [
                        "AgentState"
                    ]
                }
            }
        },
        "TorchPerception": {
            "ValidClassNames": [
                "TorchHubModel",
                "TorchCustomModel"
            ],
            "ValidParameters": {
                "TorchHubModel": {
                    "model_type": {
                        "type": "str",
                        "description": "The type of Computer Vision model that the system is",
                        "valid_entries": [
                            "Detection",
                            "Classify",
                            "Segment"
                        ]
                    },
                    "repo_name": {
                        "type": "str",
                        "description": "The Pytorch Hub name that will be used to extract the models",
                        "valid_entries": [
                            "ultralytics/yolov5"
                        ]
                    },
                    "model_name": {
                        "type": "str",
                        "description": "The type of model, usually indicating the size of the model",
                        "valid_entries": [
                            "yolov5s"
                        ]
                    },
                    "output_type": {
                        "type": "str",
                        "description": "How the detections should be recorded in relation to the images",
                        "valid_entries": [
                            "images",
                            "video",
                            "stream"
                        ]
                    },
                    "camera_name": {
                        "type": "str",
                        "description": "The name of the camera that is used as the input to this model. Should exist in the Sensors section",
                        "valid_entries": [
                            "*"
                        ]
                    }
                },
                "TorchCustomModel": {
                    "algorithm_type": {
                        "type": "str",
                        "description": "The type of Computer Vision model that the system is",
                        "valid_entries": [
                            "Detection",
                            "Classify",
                            "Segment"
                        ]
                    },
                    "model_name": {
                        "type": "str",
                        "description": "The Python class name of the Model Wrapper to use",
                        "valid_entries": [
                            "*"
                        ]
                    },
                    "weight_file_name": {
                        "type": "str",
                        "description": "The file name of the weights to use",
                        "valid_entries": [
                            "*"
                        ]
                    },
                    "output_type": {
                        "type": "str",
                        "description": "How the detections should be recorded in relation to the images",
                        "valid_entries": [
                            "images",
                            "video",
                            "stream"
                        ]
                    },
                    "camera_name": {
                        "type": "str",
                        "description": "The name of the camera that is used as the input to this model. Should exist in the Sensors section",
                        "valid_entries": [
                            "*"
                        ]
                    },
                    "model_folder_name": {
                        "type": "str",
                        "description": "The overall folder that the algorithm should be in",
                        "valid_entries": [
                            "*"
                        ]
                    },
                    "model_parameters": {
                        "type": "dict",
                        "description": "The custom parameters to be passed to the Network",
                        "valid_fields": [
                            "*"
                        ],
                        "field_data_type": "*",
                        "field_range": [
                            "*"
                        ]
                    }
                }
            },
            "ValidModuleParameters": {
                "Model": {
                    "type": "str",
                    "description": "The name of the model that will be used. This helps the server know which model to load",
                    "valid_entries": [
                        "*"
                    ]
                }
            },
            "ValidInputArgs": {
                "TorchHubModel": [
                    "Image"
                ],
                "TorchCustomModel": [
                    "Image"
                ]
            },
            "ValidReturnValues": {
                "TorchHubModel": [
                    "Detection"
                ],
                "TorchCustomModel": [
                    "Detection"
                ]
            },
            "RequiredSensors": {
                "TorchHubModel": [
                    "Camera"
                ],
                "TorchCustomModel": [
                    "Camera"
                ]
            },
            "DefaultIO": {
                "Publishes": {
                    "Perception": [
                        "Detection"
                    ]
                },
                "Subscribes": {
                    "Perception": [
                        "Image"
                    ]
                }
            }
        },
        "Perception": {
            "ValidModuleParameters": {},
            "ValidClassNames": [],
            "ValidParameters": {},
            "ValidInputArgs": {},
            "ValidReturnValues": {},
            "RequiredSensors": {},
            "DefaultIO": {
                "Publishes": {
                    "Perception": [
                        "Detection"
                    ]
                },
                "Subscribes": {
                    "Perception": [
                        "Image"
                    ]
                }
            }
        }
    }
}